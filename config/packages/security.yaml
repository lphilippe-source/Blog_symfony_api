security:
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # users_in_memory: { memory: null }
        users_in_database:
            entity:
                class: App\Entity\User
                property: email

    firewalls:
        # dev:
        #     pattern: ^/(_(profiler|wdt)|css|images|js)/
        #     security: true
        # main:
        #     pattern: /blog/login
        #     anonymous: false
        #     lazy: true
        #     provider: users_in_database
        #     guard:
        #         authenticators:
        #             - App\Security\UserAuthenticator

        login:
            pattern: ^/blog/login
            stateless: true
            anonymous: true
            json_login:
                check_path: /blog/login_check
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        api3:
            pattern: ^/blog/user
            stateless: true
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator
        api2:
            pattern: ^/blog/delete
            stateless: true
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator
        api:
            pattern: ^/blog
            stateless: true
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator
        

    encoders:
        # use your user class name here
        App\Entity\User:
            # Use native password encoder
            # This value auto-selects the best possible hashing algorithm
            # (i.e. Sodium when available).
            algorithm: bcrypt

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

    
